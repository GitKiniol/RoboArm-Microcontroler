
RoboArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00802000  00802000  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f39  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025db  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a20  00000000  00000000  00005a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  0000644c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dfc  00000000  00000000  00006600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bb  00000000  00000000  000083fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000088b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
   c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  ec:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
  fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 110:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 160:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_88>
 164:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_89>
 168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
 174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	d7 e2       	ldi	r29, 0x27	; 39
 182:	de bf       	out	0x3e, r29	; 62

00000184 <__do_copy_data>:
 184:	10 e2       	ldi	r17, 0x20	; 32
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e2       	ldi	r27, 0x20	; 32
 18a:	e4 e7       	ldi	r30, 0x74	; 116
 18c:	f3 e0       	ldi	r31, 0x03	; 3
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a0 30       	cpi	r26, 0x00	; 0
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
 19a:	20 e2       	ldi	r18, 0x20	; 32
 19c:	a0 e0       	ldi	r26, 0x00	; 0
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	aa 31       	cpi	r26, 0x1A	; 26
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	0e 94 a0 01 	call	0x340	; 0x340 <main>
 1ae:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000001b2 <__bad_interrupt>:
 1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <Buffer_InsertString>:
	buffer->IsEmpty = 1;														/* ustawienie flagi informuj¹cej ¿e bufor jest pusty					*/
	return buffer;																/* zwrócenie zainicjalizowanego bufora									*/
}

void Buffer_InsertString(buffer_t *buffer, char *str)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	if (buffer->Count < BUFFER_SIZE)											/* jeœli licznik elementów bufora mniejszy ni¿ rozmiar bufora to :		*/
 1bc:	ec 89       	ldd	r30, Y+20	; 0x14
 1be:	e9 30       	cpi	r30, 0x09	; 9
 1c0:	60 f4       	brcc	.+24     	; 0x1da <Buffer_InsertString+0x24>
	{
		strcpy(buffer->Strings[buffer->Count++], str);							/* dodaj element do bufora												*/
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	8e 0f       	add	r24, r30
 1c6:	8c 8b       	std	Y+20, r24	; 0x14
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ec 0f       	add	r30, r28
 1d0:	fd 1f       	adc	r31, r29
 1d2:	80 81       	ld	r24, Z
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	0e 94 b1 01 	call	0x362	; 0x362 <strcpy>
	}
	buffer->IsEmpty = 0;														/* zerowanie flagi informuj¹cej ¿e bufor jest pusty						*/
 1da:	8d 89       	ldd	r24, Y+21	; 0x15
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	8d 8b       	std	Y+21, r24	; 0x15
	if (buffer->Count == BUFFER_SIZE - 1) buffer->IsFull = 1;					/* ustawienie flagi informuj¹cej ¿e bufor jest pe³ny					*/
 1e0:	8c 89       	ldd	r24, Y+20	; 0x14
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	19 f4       	brne	.+6      	; 0x1ec <Buffer_InsertString+0x36>
 1e6:	8d 89       	ldd	r24, Y+21	; 0x15
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	8d 8b       	std	Y+21, r24	; 0x15
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <Usart_GetString>:

char *Usart_GetString(char znak)
{
	static uint8_t CharsCount = 0;												/* licznik znaków odebranych z usart									*/
	
	if (znak > 31 && znak < 127)												/* jeœli odebrany znak jest drukowalny to:								*/
 1f2:	90 ee       	ldi	r25, 0xE0	; 224
 1f4:	98 0f       	add	r25, r24
 1f6:	9f 35       	cpi	r25, 0x5F	; 95
 1f8:	50 f4       	brcc	.+20     	; 0x20e <Usart_GetString+0x1c>
	{
		ReceivedChars[CharsCount++] = znak;										/* dodaj znak do tablicy												*/
 1fa:	e0 91 03 20 	lds	r30, 0x2003	; 0x802003 <CharsCount.3977>
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	9e 0f       	add	r25, r30
 202:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <CharsCount.3977>
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e8 5f       	subi	r30, 0xF8	; 248
 20a:	ff 4d       	sbci	r31, 0xDF	; 223
 20c:	80 83       	st	Z, r24
	}
	
	if (znak == CR || znak == NUL || CharsCount >= RECEIVE_MAX_CHARS - 3)		/* jeœli wykryty zostanie koniec ³añcucha to:							*/
 20e:	8d 30       	cpi	r24, 0x0D	; 13
 210:	31 f0       	breq	.+12     	; 0x21e <Usart_GetString+0x2c>
 212:	88 23       	and	r24, r24
 214:	21 f0       	breq	.+8      	; 0x21e <Usart_GetString+0x2c>
 216:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <CharsCount.3977>
 21a:	8d 30       	cpi	r24, 0x0D	; 13
 21c:	d0 f0       	brcs	.+52     	; 0x252 <Usart_GetString+0x60>
	{
		ReceivedChars[CharsCount++] = LF;										/* dodaj znak nowego wiersza											*/
 21e:	a0 91 03 20 	lds	r26, 0x2003	; 0x802003 <CharsCount.3977>
 222:	e1 e0       	ldi	r30, 0x01	; 1
 224:	ea 0f       	add	r30, r26
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	a8 5f       	subi	r26, 0xF8	; 248
 22a:	bf 4d       	sbci	r27, 0xDF	; 223
 22c:	8a e0       	ldi	r24, 0x0A	; 10
 22e:	8c 93       	st	X, r24
		ReceivedChars[CharsCount++] = CR;										/* dodaj znak powrotu karetki											*/
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	8e 0f       	add	r24, r30
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e8 5f       	subi	r30, 0xF8	; 248
 238:	ff 4d       	sbci	r31, 0xDF	; 223
 23a:	9d e0       	ldi	r25, 0x0D	; 13
 23c:	90 83       	st	Z, r25
		ReceivedChars[CharsCount] = NUL;										/* dodaj znak NUL koniec wiersza										*/
 23e:	e8 2f       	mov	r30, r24
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e8 5f       	subi	r30, 0xF8	; 248
 244:	ff 4d       	sbci	r31, 0xDF	; 223
 246:	10 82       	st	Z, r1
		CharsCount = 0;															/* zeruj licznik odebranych znaków										*/
 248:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <CharsCount.3977>
		return &ReceivedChars[0];												/* zwróæ wskaŸnik na tablicê odebranych znaków							*/
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	90 e2       	ldi	r25, 0x20	; 32
 250:	08 95       	ret
	} 
	else																		/* a jeœli koniec wiersza nie zosta³ wykryty to :						*/
	{
		return NULL;															/* zwróæ wartoœæ pust¹(odbiór wiersza jeszcze siê nie zakoñczy³)		*/
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 256:	08 95       	ret

00000258 <__vector_89>:
		//ReceivedString = NULL;																				/* zeruj ³añcuch odbiorczy												*/
	//}
//}

ISR(USARTD0_DRE_vect)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
	static uint8_t i = 0;																					/* licznik znaków														*/
	if (!SendingString[i] || (SendingString[i] < 32 && SendingString[i] != 10 && SendingString[i] != 13))	/* jeœli znak NUL lub niedrukowalny to zakoñcz wysy³anie				*/
 26a:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <i.3983>
 26e:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <SendingString>
 272:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <SendingString+0x1>
 276:	e9 0f       	add	r30, r25
 278:	f1 1d       	adc	r31, r1
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	31 f0       	breq	.+12     	; 0x28c <__vector_89+0x34>
 280:	80 32       	cpi	r24, 0x20	; 32
 282:	98 f4       	brcc	.+38     	; 0x2aa <__vector_89+0x52>
 284:	8a 30       	cpi	r24, 0x0A	; 10
 286:	89 f0       	breq	.+34     	; 0x2aa <__vector_89+0x52>
 288:	8d 30       	cpi	r24, 0x0D	; 13
 28a:	79 f0       	breq	.+30     	; 0x2aa <__vector_89+0x52>
	{
		RS232Port->DATA = 0;																				/* wyœlij NUL, znak koñcz¹cy ³añcuch									*/
 28c:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <RS232Port>
 290:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <RS232Port+0x1>
 294:	10 82       	st	Z, r1
		RS232Port->CTRLA &= ~(USART_DREINTLVL1_bm);															/* zablokowanie przerwania data reg empty								*/
 296:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <RS232Port>
 29a:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <RS232Port+0x1>
 29e:	83 81       	ldd	r24, Z+3	; 0x03
 2a0:	8d 7f       	andi	r24, 0xFD	; 253
 2a2:	83 83       	std	Z+3, r24	; 0x03
		i = 0;																								/* zerowanie licznik znaków												*/
 2a4:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <i.3983>
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <__vector_89+0x62>
	}
	else																									/* jeœli aktualny znak to liczba lub litera t:							*/
	{
		RS232Port->DATA = SendingString[i++];																/* wyœlij znak															*/
 2aa:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <RS232Port>
 2ae:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <RS232Port+0x1>
 2b2:	9f 5f       	subi	r25, 0xFF	; 255
 2b4:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <i.3983>
 2b8:	80 83       	st	Z, r24
	}
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_88>:

ISR(USARTD0_RXC_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	char c = RS232Port->DATA;																				/* pobierz znak z usart													*/
 2ee:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <RS232Port>
 2f2:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <RS232Port+0x1>
 2f6:	80 81       	ld	r24, Z
	ReceivedString = Usart_GetString(c);																	/* utwórz ³añcuch z odebranych znaków									*/
 2f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Usart_GetString>
 2fc:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <ReceivedString>
 300:	90 93 19 20 	sts	0x2019, r25	; 0x802019 <ReceivedString+0x1>
	if (ReceivedString != NULL)																				/* jeœli ³añcuch znaków nie jest pusty to:								*/
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	59 f0       	breq	.+22     	; 0x31e <__vector_88+0x52>
	{
		Buffer_InsertString(ReceivingBuffer, ReceivedString);												/* dodaj ³añcuch do bufora odbiorczego									*/
 308:	bc 01       	movw	r22, r24
 30a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 30e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 312:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Buffer_InsertString>
		ReceivedString = NULL;																				/* zeruj ³añcuch odbiorczy												*/
 316:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <ReceivedString>
 31a:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <ReceivedString+0x1>
	}
}
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <main>:

TWI_t *lcdBus = &TWIE;

int main(void)
{
	ClkSys32MHz();							
 340:	0e 94 a4 01 	call	0x348	; 0x348 <ClkSys32MHz>
	//ssd1306ClrScr(lcdBus, 0xAA);
	//Driver_AxisInit();
	//Job = Data_CreateList();
	//Bluetooth = HC05_Init(Bluetooth);
	
	sei();
 344:	78 94       	sei
 346:	ff cf       	rjmp	.-2      	; 0x346 <main+0x6>

00000348 <ClkSys32MHz>:

/*-----------------definicje funkcji---------------------------------------------------------------*/

void ClkSys32MHz(void)
{
	OSC.CTRL = OSC_RC32MEN_bm;
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 34e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
 352:	81 ff       	sbrs	r24, 1
 354:	fc cf       	rjmp	.-8      	; 0x34e <ClkSys32MHz+0x6>
	CPU_CCP = CCP_IOREG_gc;
 356:	88 ed       	ldi	r24, 0xD8	; 216
 358:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
 360:	08 95       	ret

00000362 <strcpy>:
 362:	fb 01       	movw	r30, r22
 364:	dc 01       	movw	r26, r24
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	00 20       	and	r0, r0
 36c:	e1 f7       	brne	.-8      	; 0x366 <strcpy+0x4>
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
